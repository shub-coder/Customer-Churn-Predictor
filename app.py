# -*- coding: utf-8 -*-
"""Untitled66.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pg0rrnen4FuwkwBLCB-Pjtmt6h-Vc6u1
"""

"""Untitled65.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1kiWq6fuq_RnqneS1O2XD5im9n2K0sR0h
"""

# -*- coding: utf-8 -*-
"""app.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/11lWyavxwnH0UzvlpaeOoxvmsCG2ikhRK
"""

from flask import Flask, render_template, request, jsonify
import requests
import pickle
import numpy as np
import sklearn
from sklearn.preprocessing import StandardScaler
app = Flask(__name__)
model = pickle.load(open('lgbm_model.pkl', 'rb'))
@app.route('/',methods=['GET'])
def Home():
    return render_template('index.html')


standard_to = StandardScaler()
@app.route("/predict", methods=['POST'])
def predict():
    'CreditScore','Geography','Gender','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary'
    if request.method == 'POST':
        credit_score = int(request.form['CreditScore'])
        #age = standard_to.transform(age)
        Gender=int(request.form['Gender'])
        #gender = standard_to.transform(gender)
        Geography=int(request.form['Geography'])
        
        Age=int(request.form['Age'])
        #heart_disease = standard_to.transform(heart_disease)
        Tenure=int(request.form['Tenure'])
        
        IsActiveMember=int(request.form['IsActiveMember'])
        
        EstimatedSalary = int(request.form['EstimatedSalary'])
           
        Balance=int(request.form['Balance']) 

        NoOfProducts = int(request.form['NoOfProducts'])

        HasCrCard = int(request.form['HasCrCard'])

        prediction=model.predict([[CreditScore,Geography,Gender,Age,Tenure,Balance,NumOfProducts,HasCrCard,IsActiveMember,EstimatedSalary]])
        #prediction = model.predict(data)
        output=round(prediction[0],2)
        if output==0:
            return render_template('index.html',prediction_text="Congrats!! customer will stay.")
        elif output==1:
            return render_template('index.html',prediction_text="Customer will exit. You should improve your policy")
    else:
        return render_template('index.html')

if __name__=="__main__":
    app.run(debug=True)

